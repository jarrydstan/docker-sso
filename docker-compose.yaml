networks:
  backend:
    # external: true
    name: backend
    enable_ipv6: true
    driver: bridge
    ipam:
      config:
        - subnet: $BACKEND_IPV6
        - subnet: $BACKEND_IPV4
  frontend:
    # external: true
    name: frontend
    enable_ipv6: true
    driver: bridge
    ipam:
      config:
        - subnet: $FRONTEND_IPV6
        - subnet: $FRONTEND_IPV4
  socket_proxy:
    name: socket_proxy
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: $SOCKET_PROXY_IPV6
        - subnet: $SOCKET_PROXY_IPV4
services:
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    # profiles: ["core", "all"]
    networks:
      socket_proxy:
        ipv4_address: $SOCKET_PROXY_IP # You can specify a static IP
    privileged: true # true for VM. False for unprivileged LXC container.
    ports:
      - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info
      - EVENTS=1
      - PING=1
      - VERSION=1
      - AUTH=0
      - SECRETS=0
      - POST=1 
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 
      - INFO=1 
      - NETWORKS=1 
      - NODES=0
      - PLUGINS=0
      - SERVICES=1
      - SESSION=0
      - SWARM=0
      - SYSTEM=1
      - TASKS=1
      - VOLUMES=1
  postgresql:
    image: docker.io/library/postgres:16-alpine
    container_name: authentik-pg
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${PG_DB} -U $${PG_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_DB=${PG_DB}
    env_file:
      - .env
  redis:
    image: docker.io/library/redis:alpine
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
  server:
    image: ghcr.io/goauthentik/server:2025.6
    container_name: authentik-sv
    restart: unless-stopped
    command: server
    networks:
      frontend:
        ipv4_address: $AUTHENTIK_IP1
      backend:
        ipv4_address: $AUTHENTIK_IP2
      socket_proxy:
        ipv4_address: $AUTHENTIK_IP3
    ports:
      - "9000:9000"
      - "9443:9443"
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__PASSWORD=${PG_PASS}
      - AUTHENTIK_POSTGRESQL__USER=${PG_USER}
      - AUTHENTIK_POSTGRESQL__NAME=${PG_DB}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=true
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_COOKIE_DOMAIN=$AUTHENTIK_COOKIE_DOMAIN
      - AUTHENTIK_LOG_LEVEL=info
    env_file:
      - .env
    volumes:
      - ./certs/live/$ROOT_DOMAIN:/certs/$ROOT_DOMAIN
      - ./media:/media
      - ./custom-templates:/templates
      - ./css/custom.css:/web/dist/custom.css
      # - ./email/:/authentik/stages/email/templates/email/
      - ./images/logo-banner.png:/web/icons/icon_left_brand.png
      # - ./email/base.html:/authentik/stages/email/templates/email/base.html
      - ./current_email/:/authentik/stages/email/templates/email/
      # - ./current_email/:/authentik/stages/email/templates/email/
    depends_on:
      - postgresql
      - redis
  worker:
    image: ghcr.io/goauthentik/server:2025.6

    container_name: authentik-work
    restart: unless-stopped
    command: worker
    networks:
      - backend
      - socket_proxy
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__PASSWORD=${PG_PASS}
      - AUTHENTIK_POSTGRESQL__USER=${PG_USER}
      - AUTHENTIK_POSTGRESQL__NAME=${PG_DB}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=true
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
    env_file:
      - .env
    user: root
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs/live/$ROOT_DOMAIN:/certs/$ROOT_DOMAIN
      - ./certs/archive/$ROOT_DOMAIN:/archive/$ROOT_DOMAIN
      - ./custom-templates:/templates
      - ./css/custom.css:/web/dist/custom.css
      # - ./email/:/authentik/stages/email/templates/email/
      - ./images/logo-banner.png:/web/icons/icon_left_brand.png
      - ./email/base.html:/authentik/stages/email/templates/email/base.html
    depends_on:
      - postgresql
      - redis
  deunhealth:
    security_opt:
      - no-new-privileges:true
    image: qmcgaw/deunhealth
    container_name: deunhealth
    network_mode: "none"
    environment:
      - LOG_LEVEL=info
      - HEALTH_SERVER_ADDRESS=127.0.0.1:9999
      - TZ=$TZ
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
volumes:
  database:
    driver: local
  redis:
    driver: local
